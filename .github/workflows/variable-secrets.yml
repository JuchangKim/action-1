name: Exploring Variables and Secrets

on:
    workflow_dispatch: 
    # schedule:
    #   - cron: "*/1 * * * *"
#    push

env:
    CONTAINER_REGISTRY: docker.io
    IMAGE_NAME: github-actions-nginx

jobs:
################## environment variables at STEP level ####################
    # docker:
    #     runs-on: ubuntu-latest
    #     steps:
    #     - name: Docker Build
    #       env:
    #         CONTAINER_REGISTRY: docker.io
    #         {{ vars.DOCKER_USERNAME }}: siddharth1
    #         IMAGE_NAME: github-actions-nginx
    #       run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$TIMAGE_NAME:latest

    #     - name: Docker Login
    #       env:
    #         DOCKER_PASSWORD: s3cUrePaSsw0rd
    #         {{ vars.DOCKER_USERNAME }}: siddharth1
    #       run: echo docker login --username=dockerUsername --password=s3cUrePaSsw0rd

    #     - name: Docker Publish
    #       env:
    #         CONTAINER_REGISTRY: docker.io
    #         {{ vars.DOCKER_USERNAME }}: siddharth1
    #         IMAGE_NAME: github-actions-nginx
    #       run: echo docker push $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

    # deploy:
    #     needs: docker
    #     runs-on: ubuntu-latest
    #     steps:
    #     - name: Docker Run
    #       env:
    #         CONTAINER_REGISTRY: docker.io
    #         {{ vars.DOCKER_USERNAME }}: siddharth1
    #         IMAGE_NAME: github-actions-nginx
    #       run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
################## environment variables at JOB level ####################
    docker:
        runs-on: ubuntu-latest
        steps:
        - name: Docker Build
          run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

        - name: Docker Login
          run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

        - name: Docker Publish
          run: echo docker push $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

    deploy:
        needs: docker
        concurrency: 
            group: production-deployment
            cancel-in-progress: true
        runs-on: ubuntu-latest
        steps:
        - name: Docker Run
          run: |
            echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
            sleep 600s
